using DBPF_Compiler.FNV;
using System.Text;

namespace DBPF_Compiler.FileTypes
{
    public class LocalizationTable : ISporeFile
    {
        public TypeIDs TypeID => TypeIDs.locale;

        private Dictionary<uint, string>? _table;

        public void AddText(uint textID, string text)
        {
            _table ??= [];
            _table[textID] = text;
        }
        public void AddText(string textID, string text)
        {
            if (!FNVHash.TryParse(textID, out uint id))
                id = FNVHash.Compute(textID);
            AddText(id, text);
        }

        public string? GetText(uint textID)
        {
            if (_table != null && _table.TryGetValue(textID, out string? text))
                return text;

            return null;
        }
        public string? GetText(string textID)
        {
            if (!FNVHash.TryParse(textID, out uint id))
                id = FNVHash.Compute(textID);
            return GetText(id);
        }

        public bool Decode(Stream input)
        {
            using StreamReader reader = new(input);
            while (!reader.EndOfStream)
            {
                string? line = reader.ReadLine();
                if (string.IsNullOrWhiteSpace(line) || line.StartsWith('#'))
                    continue;

                int spaceIndex = line.IndexOf(' ');
                if (spaceIndex == -1)
                    continue;

                AddText(line[..spaceIndex], line[(spaceIndex + 1)..]);
            }

            return true;
        }

        public void Encode(Stream output)
        {
            var str = ToString();
            if (!string.IsNullOrEmpty(str))
                output.Write(Encoding.Unicode.GetBytes(str));
        }

        public override string? ToString()
        {
            if (_table == null)
                return null;

            StringBuilder sb = new(
                "# Generated by Database Packed File Compiler\n# https://github.com/RedGrox2013/DBPF-Compiler\n\n");
            foreach (var s in _table)
            {
                sb.Append(FNVHash.ToString(s.Key));
                sb.Append(' ');
                sb.Append(s.Value);
                sb.Append('\n');
            }

            return sb.ToString();
        }
    }
}
